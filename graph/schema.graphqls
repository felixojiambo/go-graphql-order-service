scalar Time

# ----- Types -----
type Category {
  id: ID!
  name: String!
  parent: Category
  children: [Category!]!      # Immediate children
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  category: Category!
}

# ----- Inputs -----
input NewCategory {
  name: String!
  parentID: ID
}

input NewProduct {
  name: String!
  description: String
  price: Float!
  categoryID: ID!
}

# ----- Queries -----
type Query {
  categories: [Category!]!                             # List all root categories
  productsByCategory(categoryID: ID!): [Product!]!     # All products in a category subtree
  averagePriceByCategory(categoryID: ID!): Float!      # ‚Üê NEW
}

# ----- Mutations -----
type Mutation {
  createCategory(input: NewCategory!): Category!
  createProduct(input: NewProduct!): Product!
}

type Order {
  id: ID!
  customerID: ID!
  items: [OrderItem!]!
  total: Float!
  createdAt: Time!
}

type OrderItem {
  id: ID!
  product: Product!
  quantity: Int!
  price: Float!
}

input OrderItemInput {
  productID: ID!
  quantity: Int!
}

input OrderInput {
  customerID: ID!
  items: [OrderItemInput!]!
}

extend type Mutation {
  placeOrder(input: OrderInput!): Order!
  
}
